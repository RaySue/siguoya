// 给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。
//
// 返回删除给定字符串中所有字符（字符串为空）的最小删除次数。 
//
//  **「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列**
//
// 「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。 
//
// 
//
// 示例 1： 
//
// 输入：s = "ababa"
//输出：1
//解释：字符串本身就是回文序列，只需要删除一次。
// 
//
// 示例 2： 
//
// 输入：s = "abb"
//输出：2
//解释："abb" -> "bb" -> "". 
//先删除回文子序列 "a"，然后再删除 "bb"。
// 
//
// 示例 3： 
//
// 输入：s = "baabb"
//输出：2
//解释："baabb" -> "b" -> "". 
//先删除回文子序列 "baab"，然后再删除 "b"。
// 
//
// 示例 4： 
//
// 输入：s = ""
//输出：0
// 
//
// 
//
// 提示： 
//
// 
// 0 <= s.length <= 1000 
// s 仅包含字母 'a' 和 'b' 
// 
// Related Topics 字符串 
// 👍 50 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:

    // 思路：仔细读题（读三遍以上），搞清楚这里的两个概念
    // 1. 字符串仅由字母 'a' 和 'b' 组成
    // 2. 「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列
    // **不要以为你理解子序列，每道题都可能对任何概念进行定义，如果这里的子序列是你理解的子序列，那么这道题就得是hard**
    // 如果s是空字符串，那么就返回 0
    // 如果s是一个回文串，那么就是直接返回 1 即一次删完
    // 如果s不是一个回文串，但是它的两个子序列必然是回文串，所以返回 2， 即两次删除完

    int removePalindromeSub(string s)
    {
        if (s.empty()) return 0;
        int l = 0, r = s.size() - 1;
        while(l < r) if (s[l++] != s[r--]) return 2;
        return 1;
    }
};
//leetcode submit region end(Prohibit modification and deletion)
