// 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。
// 请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
//
// 
//
// 示例 1： 
//
// 输入：nums = [4,1,4,6]
//输出：[1,6] 或 [6,1]
// 
//
// 示例 2： 
//
// 输入：nums = [1,2,10,4,1,4,3,3]
//输出：[2,10] 或 [10,2] 
//
// 
//
// 限制： 
//
// 
// 2 <= nums.length <= 10000 
// 
//
// 
// 👍 247 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution
{
public:

    // 一刷 2021.01.07 早上起来的时候看了下题解，不禁感叹，好聪明的解法，来实现一下
    // 思路：
    // 如果我们在一个数组中，一个数字出现 1 次，其余的出现 2 次，如果找到只出现 1 次的数字呢，我们只需要对全数组异或一下，答案就浮出水面了
    // 这个题目则是 两个数字 只出现了一次，其余数字出现 2 次，我们应该想办法把这两个数字放在两个组别中，是不是就和之前一样了呢？
    // 如何分组是本题的解题关键，回顾一下异或 ^ 同0异1，（取反 ~， 取与 &， 取或 |）
    // 1. 我们先对全数组做异或，相当于得到了两个数字的异或结果
    // 2. 我们在两个数字的异或结果中找到一个 1， 说明在这一位上两个数字定是不同的
    // 3. 然后我们根据这个 位（...001000...） 对数组进行分组，这个位置为 1 的在一组 为0的在另一组
    // 4. 然后我们分别对两个组求异或，答案出来了
    // 连续山峰问题
    vector<int> singleNumbers(vector<int> &nums)
    {
        int tmp = 0;
        for (auto n: nums) tmp ^= n;

        int p = 1;
        for(;;)
        {
            if ((tmp & p) != 0) break;
            p <<= 1;
        }
        int a = 0, b = 0;
        for (int i = 0; i < nums.size(); ++i)
        {
            if ((nums[i] & p) != 0)
            {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        return {a, b};
    }
};
//leetcode submit region end(Prohibit modification and deletion)
